

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7204773293:AAGoXLtiJkwaXnU9_kkt3yKoKqZcOS6XUZA"
MISTRAL_API_KEY = "rc71c6xJKYWbnfUSlvxRDi0UkmjgNfWI"
MODEL = "mistral-large-latest"  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = Mistral(api_key=MISTRAL_API_KEY)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ Mistral AI. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!")

@dp.message()
async def handle_message(message: Message):
    try:
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
        await bot.send_chat_action(message.chat.id, "typing")

        # –ó–∞–ø—Ä–æ—Å –∫ Mistral AI
        chat_response = client.chat.complete(
            model=MODEL,
            messages=[{
                "role": "user",
                "content": message.text,
            }]
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await message.reply(chat_response.choices[0].message.content, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")

async def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getMe"
        response = requests.get(url)
        if response.status_code == 200:
            logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ!")
        else:
            logging.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API.")
            return
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ webhook (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
